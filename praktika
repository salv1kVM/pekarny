1. Бизнес-процесс создания заказа
Диаграмма бизнес-процесса создания заказа

[Начало] --> [Выбор товара] --> [Добавление в корзину] --> [Проверка корзины] --> [Создание заказа] --> [Оплата] --> [Получение подтверждения] --> [Конец]


1) Выбор товара: Пользователь выбирает выпечку из списка доступных товаров.

2) Добавление в корзину: Пользователь добавляет выбранные товары в корзину.

3) Проверка корзины: Пользователь проверяет содержимое корзины и может редактировать количество или удалять товары.

4) Создание заказа: Пользователь подтверждает заказ и вводит необходимые данные (адрес доставки, контактные данные).

5) Оплата: Пользователь выбирает способ оплаты и производит оплату.

6) Получение подтверждения: Система отправляет пользователю подтверждение о создании заказа.


2. Процесс синхронизации данных между клиентом и сервером

UML Диаграмма последовательностей

[Пользователь] -> [Клиентское приложение]: Выбор товара
[Клиентское приложение] -> [Сервер]: POST /api/orders
[Сервер] -> [База данных]: Создать заказ
[База данных] -> [Сервер]: Подтверждение создания заказа
[Сервер] -> [Клиентское приложение]: Ответ с данными заказа
[Клиентское приложение] -> [Пользователь]: Отображение подтверждения заказа


API методы

1) Создание заказа

    Метод: POST /api/orders

   Параметры:

      userId: ID пользователя

      items: массив объектов с товарами (ID, количество)

      address: адрес доставки

    Вывод:

     • orderId: ID созданного заказа

     • status: статус заказа

2) Редактирование заказа

    Метод: PUT /api/orders/{orderId}

    Параметры:

      items: массив объектов с товарами (ID, количество)

    Вывод:

      status: статус обновления

3) Отмена заказа

    Метод: DELETE /api/orders/{orderId}

    Вывод:

      status: статус отмены

4) Изменение персональных данных

    Метод: PUT /api/users/{userId}

    Параметры:

      name: новое имя

      email: новый email

      phone: новый телефон

    Вывод:

      status: статус обновления

5) Оплата заказа

    Метод: POST /api/payments

    Параметры:

      orderId: ID заказа

      paymentMethod: способ оплаты

    Вывод:

      status: статус оплаты

ER-диаграмма сущностей

[Покупатель]
id (PK)
имя
фамилия
дата_рождения

[Товар]
id (PK)
название
стоимость

[Покупка]
id (PK)
покупатель_id (FK)
товар_id (FK)
дата_покупки


 3. Прототип экрана создания заказа

 Описание пользовательского интерфейса для экрана создания заказа:

1) Список товаров: Отображение доступных товаров с изображениями, названиями и ценами.

2) Кнопка "Добавить в корзину": Для каждого товара.

3) Корзина: Отображение добавленных товаров с возможностью изменить количество или удалить товар.

4) Форма для ввода адреса доставки: Поля для ввода улицы, города, почтового индекса и комментариев.

5) Кнопка "Подтвердить заказ": Для завершения процесса создания заказа.

6) Отображение итоговой суммы: Подсчет общей стоимости всех товаров в корзине.


4. Подробное описание функции редактирования заказа

Описание функции редактирования заказа:

1) Пользователь выбирает существующий заказ из списка.

2) Система загружает данные о заказе и отображает их на экране.

3) Пользователь может изменить количество товаров или удалить их из заказа.

4) После внесения изменений пользователь нажимает кнопку "Сохранить изменения".

5) Система отправляет запрос на сервер для обновления данных о заказе.

UML Диаграмма активности редактирования заказа:

[Начало] --> [Выбор заказа] --> [Загрузка данных о заказе] --> [Изменение количества/удаление товаров] --> [Сохранить изменения] --> [Отправка на сервер] --> [Получение ответа] --> [Обновление интерфейса] --> [Конец]

Используемые API методы

• Редактирование заказа
   
   PUT /api/orders/{orderId}
   {
     "items": [
       {"productId": 1, "quantity": 2},
       {"productId": 2, "quantity": 1}
     ]
   }

Процесс хранения информации о покупках пользователя:
Информация о покупках хранится в таблице Покупка, которая связывает Покупатель и Товар. Каждая запись содержит дату покупки и идентификаторы покупателя и товара.


5. SQL-запросы:

1)Вывести покупателей с количеством осуществленных покупок:

SELECT 
    Покупатели.Имя, 
    Покупатели.Фамилия, 
    COUNT(Покупки.ID) AS Количество_покупок
FROM 
    Покупатели
JOIN 
    Покупки ON Покупатели.ID = Покупки.Ключ_покупателя
GROUP BY 
    Покупатели.ID, Покупатели.Имя, Покупатели.Фамилия;

2) Общую стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания:

SELECT 
    Покупатели.Имя, 
    Покупатели.Фамилия, 
    SUM(Товары.Стоимость) AS Общая_стоимость
FROM 
    Покупатели
JOIN 
    Покупки ON Покупатели.ID = Покупки.Ключ_покупателя
JOIN 
    Товары ON Покупки.Ключ_товара = Товары.ID
GROUP BY 
    Покупатели.ID, Покупатели.Имя, Покупатели.Фамилия
ORDER BY 
    Общая_стоимость DESC;

3) Получить покупателей, купивших только один товар:

SELECT 
    Покупатели.Имя, 
    Покупатели.Фамилия
FROM 
    Покупатели
JOIN 
    Покупки ON Покупатели.ID = Покупки.Ключ_покупателя
GROUP BY 
    Покупатели.ID, Покупатели.Имя, Покупатели.Фамилия
HAVING 
    COUNT(Покупки.ID) = 1;




